rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isPackageAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.githubId in getAuthorAdmins(resource.data.authorId)
    }
    function isAuthorAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.githubId in resource.data.sourceConfig.github.admins
    }
    function getAuthorAdmins(authorId) {
      return get(/databases/$(database)/documents/authors/$(authorId)).data.sourceConfig.github.admins
    }
    function isUserAdmin() {
      return "ADMIN" in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles
    }
    match /{document=**} {
      allow read, write: if false;
    }
    match /readonly/{docId} {
      allow read: if true;
      allow write: if false;
    }
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }
    match /packages/{docId} {
      allow read: if request.auth != null;
      allow write: if isPackageAdmin();
    }
    match /authors/{docId} {
      allow read: if request.auth != null;
      allow write: if isAuthorAdmin();
    }
    match /enterprises/{docId} {
      allow read: if request.auth != null;
      allow write: if isUserAdmin();
    }
    match /releases/{docId} {
      allow read: if request.auth != null;
    }
    match /schemas/{docId} {
      allow read: if request.auth != null;
    }
  }
}